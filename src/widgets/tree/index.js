import React from "react";
import { Anchor, Grid } from "@lugia/lugia-web";
import EditTables from "../../edit-table";
import FooterNav from "../../footer-nav";
import PageNavHoC from "../../common/PageNavHoC";
import widgetrouter from "../../router/widgetrouter";
import TREE from "@lugia/lugia-web/dist/tree/lugia.tree.zh-CN.json";
import Demo from "../code-box";
import Title from "../code-box/Title";
const DefaultTree = require("./DefaultTree").default;
const RoundtTree = require("./RoundtTree").default;
const DefaultMutlipleTree = require("./DefaultMutlipleTree").default;
const DigDataTree = require("./DigDataTree").default;
const InlineDataSingleTree = require("./InlineDataSingleTree").default;
const InlineDataMutlipleTree = require("./InlineDataMutlipleTree").default;
const SuffixTree = require("./SuffixTree").default;
const ShowMenuTree = require("./ShowMenuTree").default;
const SingleDragTree = require("./SingleDragTree").default;
const ScrollBarDragTree = require("./ScrollBarDragTree").default;
const MultipleDragTree = require("./MultipleDragTree").default;

const { Link } = Anchor;
const { Row, Col } = Grid;

export default PageNavHoC(
  widgetrouter,
  class ComDemo extends React.Component {
    handleLinkClick = (e, href) => {
      if (href) {
        const name = href.slice(1);
        const anchorElement = document.getElementById(name);
        if (anchorElement) {
          anchorElement.scrollIntoView({ block: "start", behavior: "smooth" });
        }
      }
    };

    render() {
      const { next, prev, isMobile = false } = this.props;
      const span = isMobile ? 24 : 20;
      const style = isMobile ? {} : { paddingRight: "50px" };
      return (
        <Row>
          <Col span={span}>
            <div style={style}>
              <Title
                title={"树形控件"}
                subTitle={"Tree"}
                desc={"清晰地展示层级结构的信息,可展开或折叠。"}
              />
              <Demo
                title={"基本用法"}
                titleID={"tree-0"}
                code={
                  <code>{`import * as React from \'react\';\nimport { Tree, Theme } from \'@lugia/lugia-web\';\nimport Widget from \'@lugia/lugia-web/dist/consts\';\n\nconst data = [\n  { value: \'1\', text: \'选项 1\' },\n  { value: \'1.1\', text: \'选项 1.1\', pid: \'1\', path: \'1\' },\n  {\n    value: \'1.1.1\',\n    text: \'选项 1.1.1\',\n    pid: \'1.1\',\n    path: \'1/1.1\',\n    isLeaf: true\n  },\n  {\n    value: \'1.1.2\',\n    text: \'选项 1.1.2\',\n    pid: \'1.1\',\n    path: \'1/1.1\',\n    isLeaf: true,\n    notCanSelect: true\n  },\n\n  { value: \'1.2\', text: \'选项 1.2\', pid: \'1\', path: \'1\' },\n  {\n    value: \'1.2.1\',\n    text: \'选项 1.2.1\',\n    pid: \'1.2\',\n    path: \'1/1.2\',\n    isLeaf: true\n  },\n  { value: \'1.2.2\', text: \'选项 1.2.2\', pid: \'1.2\', path: \'1/1.2\' },\n  {\n    value: \'1.2.2.1\',\n    text: \'选项 1.2.2.1\',\n    pid: \'1.2.2\',\n    path: \'1/1.2/1.2.2\',\n    isLeaf: true\n  },\n\n  {\n    value: \'1.2.2.2\',\n    text: \'选项 1.2.2.2\',\n    pid: \'1.2.2\',\n    path: \'1/1.2/1.2.2\',\n    isLeaf: true\n  },\n\n  { value: \'1.3\', text: \'选项 1.3\', pid: \'1\', path: \'1\', isLeaf: true },\n\n  { value: \'2\', text: \'选项 2\' },\n  { value: \'2.1\', text: \'选项 2.1\', pid: \'2\', path: \'2\', isLeaf: true },\n  { value: \'2.2\', text: \'选项 2.2\', pid: \'2\', path: \'2\', isLeaf: true }\n];\n\nexport default class DefaultTree extends React.Component<Object, Object> {\n  render() {\n    const config = {\n      [Widget.Tree]: {\n        TreeWrap: {\n          normal: {\n            width: 300\n          }\n        }\n      }\n    };\n\n    return (\n      <Tree\n        theme={config}\n        data={data}\n        igronSelectField={\'notCanSelect\'}\n        autoHeight\n      />\n    );\n  }\n}\n`}</code>
                }
                desc={"默认为单选,可通过igronSelectField指定禁选的标识符"}
                demo={<DefaultTree />}
              ></Demo>
              <Demo
                title={"不同样式风格的单选树"}
                titleID={"tree-1"}
                code={
                  <code>{`import * as React from \'react\';\nimport { Tree, Theme } from \'@lugia/lugia-web\';\nimport Widget from \'@lugia/lugia-web/dist/consts\';\n\nconst data = [\n  { value: \'1\', text: \'选项 1\' },\n  { value: \'1.1\', text: \'选项 1.1\', pid: \'1\', path: \'1\' },\n  {\n    value: \'1.1.1\',\n    text: \'选项 1.1.1\',\n    pid: \'1.1\',\n    path: \'1/1.1\',\n    isLeaf: true\n  },\n  {\n    value: \'1.1.2\',\n    text: \'选项 1.1.2\',\n    pid: \'1.1\',\n    path: \'1/1.1\',\n    isLeaf: true,\n    notCanSelect: true\n  },\n\n  { value: \'1.2\', text: \'选项 1.2\', pid: \'1\', path: \'1\' },\n  {\n    value: \'1.2.1\',\n    text: \'选项 1.2.1\',\n    pid: \'1.2\',\n    path: \'1/1.2\',\n    isLeaf: true\n  },\n  { value: \'1.2.2\', text: \'选项 1.2.2\', pid: \'1.2\', path: \'1/1.2\' },\n  {\n    value: \'1.2.2.1\',\n    text: \'选项 1.2.2.1\',\n    pid: \'1.2.2\',\n    path: \'1/1.2/1.2.2\',\n    isLeaf: true\n  },\n\n  {\n    value: \'1.2.2.2\',\n    text: \'选项 1.2.2.2\',\n    pid: \'1.2.2\',\n    path: \'1/1.2/1.2.2\',\n    isLeaf: true\n  },\n\n  { value: \'1.3\', text: \'选项 1.3\', pid: \'1\', path: \'1\', isLeaf: true },\n\n  { value: \'2\', text: \'选项 2\' },\n  { value: \'2.1\', text: \'选项 2.1\', pid: \'2\', path: \'2\', isLeaf: true },\n  { value: \'2.2\', text: \'选项 2.2\', pid: \'2\', path: \'2\', isLeaf: true }\n];\n\nexport default class DefaultTree extends React.Component<Object, Object> {\n  render() {\n    const config = {\n      [Widget.Tree]: {\n        TreeWrap: {\n          normal: {\n            width: 300\n          }\n        }\n      }\n    };\n\n    return (\n      <Tree\n        theme={config}\n        data={data}\n        igronSelectField={\'notCanSelect\'}\n        autoHeight\n        shape={\'round\'}\n      />\n    );\n  }\n}\n`}</code>
                }
                desc={"设置shape：round,选中时圆角为全圆"}
                demo={<RoundtTree />}
              ></Demo>
              <Demo
                title={"多选的Tree"}
                titleID={"tree-2"}
                code={
                  <code>{`import * as React from \'react\';\nimport { Tree, Theme } from \'@lugia/lugia-web\';\nimport Widget from \'@lugia/lugia-web/dist/consts\';\n\nconst data = [\n  { value: \'1\', text: \'选项 1\' },\n  { value: \'1.1\', text: \'选项 1.1\', pid: \'1\', path: \'1\' },\n  {\n    value: \'1.1.1\',\n    text: \'选项 1.1.1\',\n    pid: \'1.1\',\n    path: \'1/1.1\',\n    isLeaf: true\n  },\n  {\n    value: \'1.1.2\',\n    text: \'选项 1.1.2\',\n    pid: \'1.1\',\n    path: \'1/1.1\',\n    isLeaf: true,\n    notCanSelect: true\n  },\n\n  { value: \'1.2\', text: \'选项 1.2\', pid: \'1\', path: \'1\' },\n  {\n    value: \'1.2.1\',\n    text: \'选项 1.2.1\',\n    pid: \'1.2\',\n    path: \'1/1.2\',\n    isLeaf: true\n  },\n  { value: \'1.2.2\', text: \'选项 1.2.2\', pid: \'1.2\', path: \'1/1.2\' },\n  {\n    value: \'1.2.2.1\',\n    text: \'选项 1.2.2.1\',\n    pid: \'1.2.2\',\n    path: \'1/1.2/1.2.2\',\n    isLeaf: true\n  },\n\n  {\n    value: \'1.2.2.2\',\n    text: \'选项 1.2.2.2\',\n    pid: \'1.2.2\',\n    path: \'1/1.2/1.2.2\',\n    isLeaf: true\n  },\n\n  { value: \'1.3\', text: \'选项 1.3\', pid: \'1\', path: \'1\', isLeaf: true },\n\n  { value: \'2\', text: \'选项 2\' },\n  { value: \'2.1\', text: \'选项 2.1\', pid: \'2\', path: \'2\', isLeaf: true },\n  { value: \'2.2\', text: \'选项 2.2\', pid: \'2\', path: \'2\', isLeaf: true }\n];\n\nexport default class DefaultMutlipleTree extends React.Component<\n  Object,\n  Object\n> {\n  render() {\n    const config = {\n      [Widget.Tree]: {\n        TreeWrap: {\n          normal: {\n            width: 300\n          }\n        }\n      }\n    };\n    return (\n      <Tree\n        theme={config}\n        autoHeight\n        mutliple\n        data={data}\n        igronSelectField={\'notCanSelect\'}\n      />\n    );\n  }\n}\n`}</code>
                }
                desc={"多选的Tree,可通过igronSelectField指定禁选的标识符"}
                demo={<DefaultMutlipleTree />}
              ></Demo>
              <Demo
                title={"可加载大数据"}
                titleID={"tree-3"}
                code={
                  <code>{`import * as React from \'react\';\nimport { Tree, Theme, Input } from \'@lugia/lugia-web\';\nimport Widget from \'@lugia/lugia-web/dist/consts\';\n\nconst bigTree = [];\n\ngetNumberKey();\n\nfunction getNumberKey() {\n  let key = 0;\n  for (let a = 0; a < 5; a++) {\n    const keyA = key++;\n    bigTree.push({\n      value: \`\${keyA}\`,\n      text: \`\${a}\`\n    });\n    for (let b = 0; b < 5; b++) {\n      const titleB = \`\${a}.\${b}\`;\n      const keyb = key++;\n      bigTree.push({\n        value: keyb,\n        text: titleB,\n        pid: \`\${keyA}\`,\n        path: \`\${keyA}\`\n      });\n      for (let c = 0; c < 20; c++) {\n        const titleC = \`\${a}.\${b}.\${c}\`;\n        const keyc = key++;\n        bigTree.push({\n          value: keyc,\n          text: titleC,\n          pid: \`\${keyb}\`,\n          path: \`\${keyA}/\${keyb}\`\n        });\n        for (let d = 0; d < 400; d++) {\n          const text = \`\${a}.\${b}.\${c}.\${d}\`;\n          const keyD = key++;\n          bigTree.push({\n            value: keyD,\n            text,\n            pid: \`\${keyc}\`,\n            isLeaf: true,\n            path: \`\${keyA}/\${keyb}/\${keyc}\`\n          });\n        }\n      }\n    }\n  }\n}\n\nexport default class BigDataTree extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { query: \'\' };\n  }\n\n  render() {\n    const config = {\n      [Widget.Input]: {\n        Container: {\n          normal: {\n            width: 300\n          }\n        }\n      },\n      [Widget.Tree]: {\n        Container: {\n          normal: {\n            width: 300,\n            height: 400\n          }\n        }\n      }\n    };\n    const { query } = this.state;\n\n    return <Theme config={config}>\n        <Input\n          value={query}\n          placeholder={\'请输入查询条件\'}\n          onChange={this.onChange}\n        />\n        <Tree query={query}  data={bigTree} expandAll mutliple />\n      </Theme>;\n  }\n\n  onChange = target => {\n    const { newValue: query } = target;\n    this.setState({ query });\n  };\n}\n`}</code>
                }
                desc={"可支持20万条数据快速加载成Tree控件"}
                demo={<DigDataTree />}
              ></Demo>
              <Demo
                title={"嵌套数据的单选Tree"}
                titleID={"tree-4"}
                code={
                  <code>{`import * as React from \'react\';\nimport { Tree, Theme } from \'@lugia/lugia-web\';\nimport Widget from \'@lugia/lugia-web/dist/consts\';\n\nconst data = [\n  {\n    value: \'Components\',\n    text: \'Components\',\n    children: [\n      {\n        value: \'General\',\n        text: \'General\',\n        children: [\n          {\n            value: \'Button\',\n            text: \'Button\',\n            icon: \'lugia-icon-financial_add_pic\',\n            disabled: true\n          },\n          { value: \'Icon\', text: \'Icon\', icon: \'lugia-icon-financial_archive\' }\n        ]\n      },\n\n      {\n        value: \'Layout\',\n        text: \'Layout\',\n        children: [\n          { value: \'Grid\', text: \'Grid\', disabled: true }\n        ]\n      },\n\n      {\n        value: \'Navigation\',\n        text: \'Navigation\',\n        children: [\n          { value: \'Affix\', text: \'Affix\' },\n          { value: \'Breadcrumb\', text: \'Breadcrumb\' },\n          { value: \'Dropdown\', text: \'Dropdown\' },\n          { value: \'Menu\', text: \'Menu\' },\n          { value: \'Pagination\', text: \'Pagination\' },\n          { value: \'Steps\', text: \'Steps\' }\n        ]\n      },\n\n      {\n        value: \'Data Entry\',\n        text: \'Data Entry\',\n        children: [\n          { value: \'AutoComplete\', text: \'AutoComplete\' },\n          { value: \'Cascader\', text: \'Cascader\' },\n          { value: \'Checkbox\', text: \'Checkbox\' },\n          { value: \'DatePicker\', text: \'DatePicker\' },\n          { value: \'Form\', text: \'Form\' },\n          { value: \'Input\', text: \'Input\' }\n        ]\n      }\n    ]\n  }\n];\n\nexport default class InlineDataSingleTree extends React.Component<\n  Object,\n  Object\n> {\n  render() {\n    const config = {\n      [Widget.Tree]: {\n        TreeWrap: {\n          normal: {\n            width: 300\n          }\n        }\n      }\n    };\n\n    return (\n      <Tree\n        theme={config}\n        autoHeight\n        data={data}\n        translateTreeData={true}\n        valueField={\'value\'}\n        displayField={\'text\'}\n      />\n    );\n  }\n}\n`}</code>
                }
                desc={
                  "通过指定translateTreeData：true,组件内部将嵌套数据自动转换成Tree型展开数据,可通过disabled指定禁选的项。注意需要指定valueField和displayField"
                }
                demo={<InlineDataSingleTree />}
              ></Demo>
              <Demo
                title={"嵌套数据的多选Tree"}
                titleID={"tree-5"}
                code={
                  <code>{`import * as React from \'react\';\nimport { Tree, Theme } from \'@lugia/lugia-web\';\nimport Widget from \'@lugia/lugia-web/dist/consts\';\n\nconst data = [\n  {\n    value: \'Components\',\n    text: \'Components\',\n    children: [\n      {\n        value: \'General\',\n        text: \'General\',\n        children: [\n          {\n            value: \'Button\',\n            text: \'Button\',\n            icon: \'lugia-icon-financial_add_pic\',\n            disabled: true\n          },\n          { value: \'Icon\', text: \'Icon\', icon: \'lugia-icon-financial_archive\' }\n        ]\n      },\n\n      {\n        value: \'Layout\',\n        text: \'Layout\',\n        children: [\n          { value: \'Grid\', text: \'Grid\', disabled: true }\n        ]\n      },\n\n      {\n        value: \'Navigation\',\n        text: \'Navigation\',\n        children: [\n          { value: \'Affix\', text: \'Affix\' },\n          { value: \'Breadcrumb\', text: \'Breadcrumb\' },\n          { value: \'Dropdown\', text: \'Dropdown\' },\n          { value: \'Menu\', text: \'Menu\' },\n          { value: \'Pagination\', text: \'Pagination\' },\n          { value: \'Steps\', text: \'Steps\' }\n        ]\n      },\n\n      {\n        value: \'Data Entry\',\n        text: \'Data Entry\',\n        children: [\n          { value: \'AutoComplete\', text: \'AutoComplete\' },\n          { value: \'Cascader\', text: \'Cascader\' },\n          { value: \'Checkbox\', text: \'Checkbox\' },\n          { value: \'DatePicker\', text: \'DatePicker\' },\n          { value: \'Form\', text: \'Form\' },\n          { value: \'Input\', text: \'Input\' }\n        ]\n      }\n    ]\n  }\n];\n\nexport default class InlineDataMutlipleTree extends React.Component<\n  Object,\n  Object\n> {\n  render() {\n    const config = {\n      [Widget.Tree]: {\n        TreeWrap: {\n          normal: {\n            width: 300\n          }\n        }\n      }\n    };\n\n    return (\n      <Tree\n        theme={config}\n        autoHeight\n        data={data}\n        mutliple\n        translateTreeData={true}\n        valueField={\'value\'}\n        displayField={\'text\'}\n      />\n    );\n  }\n}\n`}</code>
                }
                desc={
                  "通过指定translateTreeData：true,组件内部将嵌套数据自动转换成Tree型展开数据,可通过disabled指定禁选的项,通过mutliple生成多选Tree。注意需要指定valueField和displayField"
                }
                demo={<InlineDataMutlipleTree />}
              ></Demo>
              <Demo
                title={"自定义后缀图标的Tree"}
                titleID={"tree-6"}
                code={
                  <code>{`import * as React from \'react\';\nimport { Tree, Icon, Theme } from \'@lugia/lugia-web\';\nimport Widget from \'@lugia/lugia-web/dist/consts\';\nimport styled from \'styled-components\';\n\nconst IconBox = styled.div\`\n  margin: 0 4px;\n  z-index: 1000;\n\`;\n\nconst data = [\n  { value: \'1\', text: \'选项 1\' },\n  { value: \'1.1\', text: \'选项 1.1\', pid: \'1\', path: \'1\' },\n  {\n    value: \'1.1.1\',\n    text: \'选项 1.1.1\',\n    pid: \'1.1\',\n    path: \'1/1.1\',\n    isLeaf: true\n  },\n  {\n    value: \'1.1.2\',\n    text: \'选项 1.1.2\',\n    pid: \'1.1\',\n    path: \'1/1.1\',\n    isLeaf: true,\n    notCanSelect: true\n  },\n\n  { value: \'1.2\', text: \'选项 1.2\', pid: \'1\', path: \'1\' },\n  {\n    value: \'1.2.1\',\n    text: \'选项 1.2.1\',\n    pid: \'1.2\',\n    path: \'1/1.2\',\n    isLeaf: true\n  },\n  { value: \'1.2.2\', text: \'选项 1.2.2\', pid: \'1.2\', path: \'1/1.2\' },\n  {\n    value: \'1.2.2.1\',\n    text: \'选项 1.2.2.1\',\n    pid: \'1.2.2\',\n    path: \'1/1.2/1.2.2\',\n    isLeaf: true\n  },\n\n  {\n    value: \'1.2.2.2\',\n    text: \'选项 1.2.2.2\',\n    pid: \'1.2.2\',\n    path: \'1/1.2/1.2.2\',\n    isLeaf: true\n  },\n\n  { value: \'1.3\', text: \'选项 1.3\', pid: \'1\', path: \'1\', isLeaf: true },\n\n  { value: \'2\', text: \'选项 2\' },\n  { value: \'2.1\', text: \'选项 2.1\', pid: \'2\', path: \'2\', isLeaf: true },\n  { value: \'2.2\', text: \'选项 2.2\', pid: \'2\', path: \'2\', isLeaf: true }\n];\n\nexport default class DefaultTree extends React.Component<Object, Object> {\n  render() {\n    const config = {\n      [Widget.Tree]: {\n        TreeWrap: {\n          normal: {\n            width: 320,\n            height: 290\n          }\n        }\n      }\n    };\n\n    return (\n      <Tree\n        data={data}\n        theme={config}\n        igronSelectField={\'notCanSelect\'}\n        autoHeight\n        expandAll\n        onSelect={this.onSelect}\n        renderSuffixItems={this.renderSuffix}\n        shape={\'round\'}\n      />\n    );\n  }\n\n  renderSuffix = (item: Object) => {\n    const { isLeaf } = item;\n    if (isLeaf) {\n      return [\n        <IconBox>\n          <Icon iconClass={\'lugia-icon-direction_rollback\'} />\n        </IconBox>,\n        <IconBox>\n          <Icon iconClass={\'lugia-icon-reminder_check_square\'} />\n        </IconBox>,\n        <IconBox>\n          <Icon iconClass={\'lugia-icon-financial_delete\'} />\n        </IconBox>\n      ];\n    }\n  };\n}\n`}</code>
                }
                desc={"通过renderSuffix回调函数, 可以自定义后缀图标"}
                demo={<SuffixTree />}
              ></Demo>
              <Demo
                title={"右键显示菜单的Tree"}
                titleID={"tree-7"}
                code={
                  <code>{`import * as React from \'react\';\nimport { Tree, Icon, Theme } from \'@lugia/lugia-web\';\nimport Widget from \'@lugia/lugia-web/dist/consts\';\nimport styled from \'styled-components\';\n\nconst IconBox = styled.div\`\n  margin: 0 4px;\n\`;\n\nconst getCSS = props => {\n  const { visible, clientX, clientY } = props;\n\n  return !visible\n    ? \'display: none; opacity: 0\'\n    : \`display: block; left: \${clientX}px; top: \${clientY}px; opacity: 1\`;\n};\n\nconst MenuBox = styled.div\`\n  position: fixed;\n  width: 150px;\n  border-radius: 4px;\n  background: #fff;\n  box-shadow: 0 1px 10px rgba(0, 0, 0, 0.5);\n  \${getCSS}\n\`;\n\nconst Item = styled.div\`\n  width: 100%;\n  height: 35px;\n  line-height: 30px;\n  padding-left: 10px;\n  user-select: none;\n  color: #999;\n  cursor: pointer;\n  font-size: 12px;\n  &:hover {\n    background: rgba(77, 99, 255, 0.1);\n  }\n\`;\n\nconst data = [\n  { value: \'1\', text: \'选项 1\' },\n  { value: \'1.1\', text: \'选项 1.1\', pid: \'1\', path: \'1\' },\n  {\n    value: \'1.1.1\',\n    text: \'选项 1.1.1\',\n    pid: \'1.1\',\n    path: \'1/1.1\',\n    isLeaf: true\n  },\n  {\n    value: \'1.1.2\',\n    text: \'选项 1.1.2\',\n    pid: \'1.1\',\n    path: \'1/1.1\',\n    isLeaf: true,\n    notCanSelect: true\n  },\n\n  { value: \'1.2\', text: \'选项 1.2\', pid: \'1\', path: \'1\' },\n  {\n    value: \'1.2.1\',\n    text: \'选项 1.2.1\',\n    pid: \'1.2\',\n    path: \'1/1.2\',\n    isLeaf: true\n  },\n  { value: \'1.2.2\', text: \'选项 1.2.2\', pid: \'1.2\', path: \'1/1.2\' },\n  {\n    value: \'1.2.2.1\',\n    text: \'选项 1.2.2.1\',\n    pid: \'1.2.2\',\n    path: \'1/1.2/1.2.2\',\n    isLeaf: true\n  },\n\n  {\n    value: \'1.2.2.2\',\n    text: \'选项 1.2.2.2\',\n    pid: \'1.2.2\',\n    path: \'1/1.2/1.2.2\',\n    isLeaf: true\n  },\n\n  { value: \'1.3\', text: \'选项 1.3\', pid: \'1\', path: \'1\', isLeaf: true },\n\n  { value: \'2\', text: \'选项 2\' },\n  { value: \'2.1\', text: \'选项 2.1\', pid: \'2\', path: \'2\', isLeaf: true },\n  { value: \'2.2\', text: \'选项 2.2\', pid: \'2\', path: \'2\', isLeaf: true }\n];\n\nexport default class DefaultTree extends React.Component<Object, Object> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n      clientX: 0,\n      clientY: 0,\n      start: 0\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\'click\', this._handleClick);\n    document.addEventListener(\'scroll\', this._handleScroll);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\'click\', this._handleClick);\n    document.removeEventListener(\'scroll\', this._handleScroll);\n  }\n\n  _handleClick = (event: Object) => {\n    const { visible } = this.state;\n    if (visible) {\n      this.setState({ visible: false });\n    }\n  };\n\n  _handleScroll = (event: Object) => {\n    const { visible } = this.state;\n    if (visible) {\n      this.setState({ visible: false });\n    }\n  };\n\n  getTriggerMenu(isLeaf: boolean) {\n    return isLeaf\n      ? [\n          <Item\n            onContextMenu={e => {\n              e.preventDefault();\n              return;\n            }}\n          >\n            叶子结点选项1\n          </Item>,\n          <Item\n            onContextMenu={e => {\n              e.preventDefault();\n              return;\n            }}\n          >\n            叶子结点选项2\n          </Item>\n        ]\n      : [\n          <Item\n            onContextMenu={e => {\n              e.preventDefault();\n              return;\n            }}\n          >\n            父级节点选项1\n          </Item>,\n          <Item\n            onContextMenu={e => {\n              e.preventDefault();\n              return;\n            }}\n          >\n            父级节点选项2\n          </Item>\n        ];\n  }\n\n  onRightClick = (target: Object) => {\n    const { event, item } = target;\n    const { notCanSelect, isLeaf } = item;\n    if (notCanSelect) {\n      return;\n    }\n    this.isLeaf = isLeaf;\n    const { clientX, clientY } = event;\n\n    this.setState({\n      visible: true,\n      clientX,\n      clientY,\n      item\n    });\n  };\n\n  render() {\n    const config = {\n      [Widget.Tree]: {\n        TreeWrap: {\n          normal: {\n            width: 320,\n            height: 290\n          }\n        }\n      }\n    };\n    const { visible, clientX, clientY } = this.state;\n    const menu = this.getTriggerMenu(this.isLeaf);\n    return [\n      <Tree\n        data={data}\n        theme={config}\n        igronSelectField={\'notCanSelect\'}\n        autoHeight\n        expandAll\n        onSelect={this.onSelect}\n        shape={\'round\'}\n        onRightClick={this.onRightClick}\n      />,\n      <MenuBox visible={visible} clientX={clientX} clientY={clientY}>\n        {menu}\n      </MenuBox>\n    ];\n  }\n}\n`}</code>
                }
                desc={"通过onRightClick事件, 展示自定义菜单"}
                demo={<ShowMenuTree />}
              ></Demo>
              <Demo
                title={"不带滚动条的拖拽树"}
                titleID={"tree-8"}
                code={
                  <code>{`import * as React from \"react\";\nimport { Tree, Theme, message } from \"@lugia/lugia-web\";\nimport Widget from \"@lugia/lugia-web/dist/consts\";\n\nconst config = {\n  [Widget.Tree]: {\n    Container: {\n      normal: {\n        width: 250\n      }\n    }\n  }\n};\n\nconst nestedData = [\n  {\n    value: \"0\",\n    text: \"北京分行\",\n    children: [\n      {\n        value: \"0-0\",\n        text: \"朝阳支行办事处\",\n        children: [\n          { value: \"0-0-0\", text: \"朝阳支行办事处-1\" },\n          { value: \"0-0-1\", text: \"朝阳支行办事处-2\" }\n        ]\n      },\n      { value: \"0-1\", text: \"海淀支行办事处\" },\n      { value: \"0-2\", text: \"石景山支行办事处\" }\n    ]\n  },\n  {\n    value: \"1\",\n    text: \"天津分行\",\n    children: [\n      { value: \"和平支行办事处\", text: \"和平支行办事处\" },\n      { value: \"河东支行办事处\", text: \"河东支行办事处\" },\n      { value: \"南开支行办事处\", text: \"南开支行办事处\" }\n    ]\n  }\n];\n\nconst switchIconNames = {\n  open: \"lugia-icon-direction_down\",\n  close: \"lugia-icon-direction_right\"\n};\nexport default class DragSingleTree extends React.Component<> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nestedData\n    };\n  }\n  recursion = (data, key, callback) => {\n    let flag = false;\n    const fn = (data, key, xx) => {\n      if (Array.isArray(data) && data.length > 0) {\n        for (let i = 0; i < data.length; i++) {\n          if (flag) {\n            return;\n          }\n          const info = data[i];\n          if (info.value === key) {\n            flag = true;\n            return callback(info, i, data);\n          }\n          if (Array.isArray(info.children) && info.children.length > 0) {\n            fn(info.children, key, callback);\n          }\n        }\n      }\n    };\n    fn(data, key, callback);\n  };\n\n  onDropOfnested = dragData => {\n    const {\n      dragInfo: { key } = {},\n      targetInfo: { pid, key: targetKye, pos, dropPosition },\n      dropToGap\n    } = dragData;\n    const { nestedData: info } = this.state;\n    const positionArray = pos.split(\"-\");\n    const InsertPosition = positionArray[positionArray.length - 1];\n    let dragObj = {};\n    this.recursion(info, key, (item, index, data) => {\n      data.splice(index, 1);\n      dragObj = item;\n    });\n    if (dropToGap) {\n      if (pid) {\n        this.recursion(info, pid, (item, index, data) => {\n          item.children = item.children || [];\n          dropPosition === \"top\"\n            ? item.children.splice(InsertPosition, 0, dragObj)\n            : item.children.splice(InsertPosition + 1, 0, dragObj);\n        });\n      } else {\n        dropPosition === \"top\"\n          ? info.splice(InsertPosition, 0, dragObj)\n          : info.splice(InsertPosition + 1, 0, dragObj);\n      }\n    } else {\n      this.recursion(info, targetKye, (item, index, data) => {\n        item.children = item.children || [];\n        item.children.push(dragObj);\n      });\n    }\n    this.setState({ info: [...info] });\n  };\n\n  render() {\n    const { nestedData = [] } = this.state;\n    return (\n      <div>\n        <Tree\n          data={nestedData}\n          expandAll\n          theme={config}\n          translateTreeData\n          autoHeight\n          draggable\n          parentIsHighlight\n          onDrop={this.onDropOfnested}\n          switchIconNames={switchIconNames}\n        />\n      </div>\n    );\n  }\n}\n`}</code>
                }
                desc={
                  "通过设置draggable：true和autoHeight,可实现不带滚动条的树节点换位。"
                }
                demo={<SingleDragTree />}
              ></Demo>
              <Demo
                title={"带滚动条的拖拽树"}
                titleID={"tree-9"}
                code={
                  <code>{`import * as React from \"react\";\nimport { Tree, Theme, message } from \"@lugia/lugia-web\";\nimport Widget from \"@lugia/lugia-web/dist/consts\";\n\nconst config = {\n  [Widget.Tree]: {\n    Container: {\n      normal: {\n        width: 250\n      }\n    }\n  }\n};\n\nconst delayeringData = [\n  { value: \"0\", text: \"北京分行\" },\n  { value: \"0.0\", text: \"朝阳支行办事处\", pid: \"0\", path: \"0\" },\n  {\n    value: \"0.0.0\",\n    text: \"朝阳支行办事处-1\",\n    pid: \"0.0\",\n    path: \"0/0.0\",\n    isLeaf: true,\n    notCanSelect1: true\n  },\n  {\n    value: \"0.0.1\",\n    text: \"朝阳支行办事处-2\",\n    pid: \"0.0\",\n    path: \"0/0.0\",\n    isLeaf: true\n  },\n  { value: \"0.1\", text: \"海淀支行办事处\", pid: \"0\", path: \"0\", isLeaf: true },\n  { value: \"0.2\", text: \"石景山支行办事处\", pid: \"0\", path: \"0\", isLeaf: true },\n  { value: \"1\", text: \"天津分行\" },\n  { value: \"1.0\", text: \"和平支行办事处\", pid: \"1\", path: \"1\", isLeaf: true },\n  { value: \"1.1\", text: \"河东支行办事处\", pid: \"1\", path: \"1\", isLeaf: true },\n  { value: \"1.2\", text: \"南开支行办事处\", pid: \"1\", path: \"1\", isLeaf: true }\n];\n\nconst switchIconNames = {\n  open: \"lugia-icon-direction_down\",\n  close: \"lugia-icon-direction_right\"\n};\nexport default class DragSingleTree extends React.Component<> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      delayeringData\n    };\n  }\n  recursion = (data, key, callback) => {\n    let flag = false;\n    const fn = (data, key, xx) => {\n      if (Array.isArray(data) && data.length > 0) {\n        for (let i = 0; i < data.length; i++) {\n          if (flag) {\n            return;\n          }\n          const info = data[i];\n          if (info.value === key) {\n            flag = true;\n            return callback(info, i, data);\n          }\n          if (Array.isArray(info.children) && info.children.length > 0) {\n            fn(info.children, key, callback);\n          }\n        }\n      }\n    };\n    fn(data, key, callback);\n  };\n\n  onDropOfDelayering = dragData => {\n    const { delayeringData: metadata } = this.state;\n    let {\n      dragInfo: { dargCurrentIndex, dargNextIndex, dargPreIndex } = {},\n      targetInfo: { dropPosition, targetParentIndex, targetCurrentIndex },\n      dropToGap,\n      translateTreeData\n    } = dragData;\n    if (translateTreeData) return;\n    let dragObj = [];\n    const dragCurrentData = metadata[dargCurrentIndex];\n    const dragPreData = metadata[dargPreIndex];\n    const dragNextdata = metadata[dargNextIndex];\n    if (\n      dragNextdata &&\n      dragCurrentData.pid !== dragNextdata.pid &&\n      dragPreData &&\n      dragCurrentData.pid !== dragPreData.pid\n    ) {\n      dragPreData.isLeaf = true;\n    }\n    if (!dragNextdata && dragCurrentData.pid !== dragPreData.pid) {\n      dragPreData.isLeaf = true;\n    }\n    const deleteCount = this.calculationDragCount(dargCurrentIndex);\n    dragObj = metadata.splice(dargCurrentIndex, deleteCount);\n    targetCurrentIndex =\n      targetCurrentIndex >= dargCurrentIndex\n        ? targetCurrentIndex - deleteCount\n        : targetCurrentIndex;\n    targetParentIndex =\n      targetParentIndex >= dargCurrentIndex\n        ? targetParentIndex - deleteCount\n        : targetParentIndex;\n    if (dropToGap) {\n      if (dropPosition === \"top\") {\n        this.dragTargetToTopHandler(\n          targetCurrentIndex,\n          dragObj,\n          targetParentIndex\n        );\n      } else {\n        this.dragTargetToBottomHandler(\n          targetCurrentIndex,\n          dragObj,\n          targetParentIndex\n        );\n      }\n    } else {\n      this.dragTargetToInHandler(targetCurrentIndex, dragObj);\n    }\n    this.setState({ delayeringData: [...metadata] });\n  };\n\n  dragTargetToTopHandler(targetIndex, InsertNodeinfos, targetParentIndex) {\n    const { delayeringData: metadata } = this.state;\n    const { pid: targetPid = \"\" } = metadata[targetIndex];\n    metadata.splice(targetIndex, 0, ...InsertNodeinfos);\n    let nextPathArray = [];\n    if (targetPid) {\n      const updataItem = metadata[targetParentIndex];\n      updataItem.isLeaf = false;\n      nextPathArray = updataItem.path\n        ? [updataItem.path, updataItem.value]\n        : [updataItem.value];\n    }\n    this.updataDataPath({\n      pid: targetPid,\n      deleteCount: InsertNodeinfos.length,\n      fixTargetCurrentIndex: targetIndex,\n      nextPathArray\n    });\n  }\n\n  dragTargetToBottomHandler(\n    targetIndex,\n    InsertNodeinfos = [],\n    targetParentIndex\n  ) {\n    const { delayeringData: metadata } = this.state;\n    const count = this.calculationDragCount(targetIndex);\n    const { pid: targetPid = \"\" } = metadata[targetIndex];\n    metadata.splice(targetIndex + count, 0, ...InsertNodeinfos);\n    let nextPathArray = [];\n    if (targetPid) {\n      const updataItem = metadata[targetParentIndex];\n      updataItem.isLeaf = false;\n      nextPathArray = updataItem.path\n        ? [updataItem.path, updataItem.value]\n        : [updataItem.value];\n    }\n    this.updataDataPath({\n      pid: targetPid,\n      deleteCount: InsertNodeinfos.length,\n      fixTargetCurrentIndex: targetIndex + count,\n      nextPathArray\n    });\n  }\n\n  dragTargetToInHandler(targetIndex, InsertNodeinfos = []) {\n    const { delayeringData: metadata } = this.state;\n    metadata.splice(targetIndex + 1, 0, ...InsertNodeinfos);\n    const { value = \"\" } = metadata[targetIndex];\n    let nextPathArray = [];\n    const updataItem = metadata[targetIndex];\n    updataItem.isLeaf = false;\n    nextPathArray = updataItem.path\n      ? [updataItem.path, updataItem.value]\n      : [updataItem.value];\n    this.updataDataPath({\n      pid: value,\n      deleteCount: InsertNodeinfos.length,\n      fixTargetCurrentIndex: targetIndex + 1,\n      nextPathArray\n    });\n  }\n\n  calculationDragCount(dargCurrentIndex) {\n    const { delayeringData: metadata } = this.state;\n    let deleteCount = 1;\n    for (let i = dargCurrentIndex + 1, max = metadata.length; i < max; i++) {\n      const tem = metadata[i];\n      const { path = \"\" } = tem;\n      const pidArray = path.split(\"/\");\n      if (pidArray.indexOf(metadata[dargCurrentIndex].value) === -1) {\n        break;\n      }\n      deleteCount += 1;\n    }\n    return deleteCount;\n  }\n\n  updataDataPath(parameter) {\n    const { delayeringData: metadata } = this.state;\n    const {\n      pid,\n      deleteCount,\n      fixTargetCurrentIndex,\n      nextPathArray\n    } = parameter;\n    const startIndex = fixTargetCurrentIndex;\n    const endIndex = fixTargetCurrentIndex + deleteCount;\n    let prePathArray = [];\n    for (let i = startIndex; i < endIndex; i++) {\n      const tem = metadata[i];\n      if (i === startIndex) {\n        tem.pid = pid;\n        prePathArray = tem.path ? tem.path.split(\"/\") : [];\n        tem.path = nextPathArray.join(\"/\");\n      } else {\n        const currentPathArray = tem.path ? tem.path.split(\"/\") : [];\n        currentPathArray.splice(0, prePathArray.length);\n        tem.path = nextPathArray.concat(currentPathArray).join(\"/\");\n      }\n    }\n  }\n\n  render() {\n    const { delayeringData = [] } = this.state;\n    return (\n      <div>\n        <Tree\n          data={delayeringData}\n          expandAll\n          theme={config}\n          draggable\n          parentIsHighlight\n          onDrop={this.onDropOfDelayering}\n          switchIconNames={switchIconNames}\n        />\n      </div>\n    );\n  }\n}\n`}</code>
                }
                desc={"通过设置draggable：true,可实现带滚动条的树节点的换位。"}
                demo={<ScrollBarDragTree />}
              ></Demo>
              <Demo
                title={"树的分组拖拽"}
                titleID={"tree-10"}
                code={
                  <code>{`import * as React from \"react\";\nimport { Tree, Theme, message } from \"@lugia/lugia-web\";\nimport Widget from \"@lugia/lugia-web/dist/consts\";\n\nconst config = {\n  [Widget.Tree]: {\n    Container: {\n      normal: {\n        width: 200\n      }\n    }\n  }\n};\n\nconst sourceData = [\n  {\n    value: \"0\",\n    text: \"动物\",\n    children: [\n      {\n        value: \"0-0\",\n        text: \"运动分类\",\n        notCanSelect1: true,\n        children: [\n          { value: \"0-0-0\", text: \"水中游\", notCanSelect1: true },\n          { value: \"0-0-1\", text: \"地上走\", notCanSelect1: true },\n          { value: \"0-0-2\", text: \"空中飞\", notCanSelect1: true }\n        ]\n      },\n      {\n        value: \"0-1\",\n        text: \"生存方式\",\n        children: [\n          { value: \"0-1-0\", text: \"野生动物\" },\n          { value: \"0-1-1\", text: \"饲养动物\" }\n        ]\n      },\n      {\n        value: \"0-2\",\n        text: \"食性\",\n        children: [\n          { value: \"0-2-0\", text: \"植物动物\" },\n          { value: \"0-2-1\", text: \"肉食动物\" },\n          { value: \"0-2-2\", text: \"杂食动物\" }\n        ]\n      },\n      {\n        value: \"0-3\",\n        text: \"身体特征\",\n        children: [\n          { value: \"0-3-0\", text: \"鱼类\" },\n          { value: \"0-3-1\", text: \"鸟类\" },\n          { value: \"0-3-2\", text: \"昆虫\" },\n          { value: \"0-3-3\", text: \"哺乳类\" },\n          { value: \"0-3-4\", text: \"软体类\" }\n        ]\n      }\n    ]\n  }\n];\n\nconst draggedData = [\n  {\n    value: \"0\",\n    text: \"动物\",\n    children: [\n      {\n        value: \"0-0\",\n        text: \"运动分类\",\n        children: [{ value: \"0-0-0\", text: \"水中游\" }]\n      },\n\n      {\n        value: \"0-2\",\n        text: \"食性\",\n        children: [\n          { value: \"0-2-0\", text: \"植物动物\" },\n          { value: \"0-2-1\", text: \"肉食动物\" }\n        ]\n      },\n      {\n        value: \"0-3\",\n        text: \"身体特征\",\n        children: [{ value: \"0-3-1\", text: \"哺乳类\" }]\n      }\n    ]\n  }\n];\n\nconst otherData = [\n  {\n    value: \"0\",\n    text: \"动物\",\n    children: [\n      {\n        value: \"0-0\",\n        text: \"运动分类\",\n        children: [{ value: \"0-0-0\", text: \"水中游\" }]\n      },\n\n      {\n        value: \"0-2\",\n        text: \"食性\",\n        children: [\n          { value: \"0-2-0\", text: \"植物动物\" },\n          { value: \"0-2-1\", text: \"肉食动物\" }\n        ]\n      },\n      {\n        value: \"0-3\",\n        text: \"身体特征\",\n        children: [{ value: \"0-3-1\", text: \"哺乳类\" }]\n      }\n    ]\n  }\n];\n\nconst switchIconNames = {\n  open: \"lugia-icon-direction_down\",\n  close: \"lugia-icon-direction_right\"\n};\n\nexport default class DragMultipTree extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sourceData,\n      draggedData,\n      otherData\n    };\n  }\n  recursion = (data, key, callback) => {\n    let flag = false;\n    const fn = (data, key, xx) => {\n      if (Array.isArray(data) && data.length > 0) {\n        for (let i = 0; i < data.length; i++) {\n          if (flag) {\n            return;\n          }\n          const info = data[i];\n          if (info.value === key) {\n            flag = true;\n            return callback(info, i, data);\n          }\n          if (Array.isArray(info.children) && info.children.length > 0) {\n            fn(info.children, key, callback);\n          }\n        }\n      }\n    };\n    fn(data, key, callback);\n  };\n\n  mouseLeave = node => {\n    const { nodeData: { value: nodeKey } = {} } = node;\n    const { sourceData: info } = this.state;\n    let dragObj = {};\n    this.recursion(info, nodeKey, (item, index, data) => {\n      dragObj = item;\n    });\n    this.dragObj = JSON.parse(JSON.stringify(dragObj));\n  };\n\n  onDragEnter = node => {\n    console.log(\"todo\", node);\n  };\n\n  onDragEnd = () => {\n    this.dragObj = null;\n  };\n  nodeIsExistence = (key, source) => {\n    let tem = null;\n    this.recursion(source, key, (item, index, data) => {\n      tem = item;\n    });\n    return tem ? true : false;\n  };\n  onDrop = dragData => {\n    const {\n      dragInfo: { key } = {},\n      targetInfo: { pid, key: targetKye, pos, dropPosition },\n      dropToGap,\n      isSelf\n    } = dragData;\n    const { draggedData: info } = this.state;\n    const positionArray = pos.split(\"-\");\n    const InsertPosition = positionArray[positionArray.length - 1];\n    let dragObj = {};\n    if (isSelf) {\n      this.recursion(info, key, (item, index, data) => {\n        data.splice(index, 1);\n        dragObj = item;\n      });\n    } else {\n      const { value: key, text } = this.dragObj;\n      const isExistence = this.nodeIsExistence(key, info);\n      isExistence && message.error(\`\${text},节点已经存在!\`, 2);\n      dragObj = this.dragObj && !isExistence ? this.dragObj : null;\n    }\n    if (!dragObj) return;\n    if (dropToGap) {\n      if (pid) {\n        this.recursion(info, pid, (item, index, data) => {\n          item.children = item.children || [];\n          dropPosition === \"top\"\n            ? item.children.splice(InsertPosition, 0, dragObj)\n            : item.children.splice(InsertPosition + 1, 0, dragObj);\n        });\n      } else {\n        dropPosition === \"top\"\n          ? info.splice(InsertPosition, 0, dragObj)\n          : info.splice(InsertPosition + 1, 0, dragObj);\n      }\n    } else {\n      this.recursion(info, targetKye, (item, index, data) => {\n        item.children = item.children || [];\n        item.children.push(dragObj);\n      });\n    }\n    this.setState({ draggedData: [...info] });\n  };\n\n  onDropOfnested = dragData => {\n    const {\n      dragInfo: { key } = {},\n      targetInfo: { pid, key: targetKye, pos, dropPosition },\n      dropToGap\n    } = dragData;\n    const { otherData: info } = this.state;\n    const positionArray = pos.split(\"-\");\n    const InsertPosition = positionArray[positionArray.length - 1];\n    let dragObj = {};\n    this.recursion(info, key, (item, index, data) => {\n      data.splice(index, 1);\n      dragObj = item;\n    });\n    if (dropToGap) {\n      if (pid) {\n        this.recursion(info, pid, (item, index, data) => {\n          item.children = item.children || [];\n          dropPosition === \"top\"\n            ? item.children.splice(InsertPosition, 0, dragObj)\n            : item.children.splice(InsertPosition + 1, 0, dragObj);\n        });\n      } else {\n        dropPosition === \"top\"\n          ? info.splice(InsertPosition, 0, dragObj)\n          : info.splice(InsertPosition + 1, 0, dragObj);\n      }\n    } else {\n      this.recursion(info, targetKye, (item, index, data) => {\n        item.children = item.children || [];\n        item.children.push(dragObj);\n      });\n    }\n    this.setState({ info: [...info] });\n  };\n\n  render() {\n    const { sourceData, draggedData, otherData } = this.state;\n    return (\n      <div>\n        <div style={{ display: \"flex\", flex: 1 }}>\n          <div style={{ flex: 1 }}>\n            <Tree\n              data={sourceData}\n              igronSelectField={\"notCanSelect1\"}\n              groupKey={\"111\"}\n              expandAll\n              theme={config}\n              translateTreeData\n              autoHeight\n              onDragLeave={this.mouseLeave}\n              onDragEnd={this.onDragEnd}\n              draggable\n              parentIsHighlight\n              switchIconNames={switchIconNames}\n            />\n          </div>\n          <div style={{ flex: 1 }}>\n            <Tree\n              data={draggedData}\n              draggable\n              onDragEnter={this.onDragEnter}\n              onDragEnd={this.onDragEnd}\n              onDrop={this.onDrop}\n              groupKey={\"111\"}\n              translateTreeData\n              expandAll\n              theme={config}\n              autoHeight\n              parentIsHighlight\n              switchIconNames={switchIconNames}\n            />\n          </div>\n          <div style={{ flex: 1 }}>\n            <Tree\n              data={otherData}\n              translateTreeData\n              expandAll\n              theme={config}\n              onDrop={this.onDropOfnested}\n              autoHeight\n              draggable\n              parentIsHighlight\n              switchIconNames={switchIconNames}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n`}</code>
                }
                desc={
                  "通过设置groupKey属性，可实现树与树的节点交互位置（两个tree的groupKey必须一致）"
                }
                demo={<MultipleDragTree />}
              ></Demo>
              <EditTables dataSource={TREE} />
              <FooterNav prev={prev} next={next} />
            </div>
          </Col>
          {!isMobile && (
            <Col span={4}>
              <Anchor
                slideType="line"
                onClick={this.handleLinkClick}
                useHref={false}
              >
                <Link title={"基本用法"} href={"#tree-0"} />
                <Link title={"不同样式风格的单选树"} href={"#tree-1"} />
                <Link title={"多选的Tree"} href={"#tree-2"} />
                <Link title={"可加载大数据"} href={"#tree-3"} />
                <Link title={"嵌套数据的单选Tree"} href={"#tree-4"} />
                <Link title={"嵌套数据的多选Tree"} href={"#tree-5"} />
                <Link title={"自定义后缀图标的Tree"} href={"#tree-6"} />
                <Link title={"右键显示菜单的Tree"} href={"#tree-7"} />
                <Link title={"不带滚动条的拖拽树"} href={"#tree-8"} />
                <Link title={"带滚动条的拖拽树"} href={"#tree-9"} />
                <Link title={"树的分组拖拽"} href={"#tree-10"} />
              </Anchor>
            </Col>
          )}
        </Row>
      );
    }
  }
);
